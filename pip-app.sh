export PIPAPP_DIR="${PIPAPP_DIR:=$HOME/.pip-apps}"
export PATH="$PIPAPP_DIR/bin:$PATH"

_pip-app::install () {

    # Examples:
    # pip-app install ansible
    # pip-app install ansible PyYAML

    if [[ "$#" -lt 1 ]]; then
        echo "Package name missing!"
        return 1
    fi

    local name="$1"; shift

    local venv_dir="$PIPAPP_DIR/virtualenvs/$name"

    if [[ -d "$venv_dir" ]]; then
        if [[ "$#" -lt 1 ]]; then
            echo 'A virtual env with that name already exists and no additional package was requested.' >&2
            return 3
        fi
    else
        # Create a new virtualenv
        virtualenv "$venv_dir"
    fi

    local extra_packages="$@"
    echo "Creating venv in $venv_dir"
    echo "Installing app: $name"
    echo "Additional apps for this venv: $extra_packages"

    # Executables present before installation.
    local execs_before="$(ls "$venv_dir/bin")"

    # Install the app.
    (source "$venv_dir/bin/activate" &&
        pip install "$name")

    if [ ! -z "$extra_packages"  ]; then
        (source "$venv_dir/bin/activate" &&
        pip install "$@")
    fi

    # Executables present after installation.
    local execs_after="$(ls "$venv_dir/bin")"

    # The new execs created by the app.
    local execs_new="$(comm -13 <(echo "$execs_before") <(echo "$execs_after"))"

    # For idempotency reasons, return code 3 when no change
    if [ -z "$execs_new" ]; then
       return 3
    fi

    # Make sure the bin directory exists.
    mkdir -p "$PIPAPP_DIR/bin"

    echo "$execs_new" |
        while read line; do
            {
                echo '#!/usr/bin/env bash'
                echo "# Generated by pip-app. For the app '$name'."
                echo "source '$venv_dir/bin/activate'"
                echo "exec '$venv_dir/bin/$line' \"\$@\""
            } > "$PIPAPP_DIR/bin/$line"
            chmod +x "$PIPAPP_DIR/bin/$line"
        done

    # Save a record of the executables by this app.
    mkdir -p "$PIPAPP_DIR/manifest"
    echo "$execs_new" |
        sed "s:^:$PIPAPP_DIR/bin/:" >> "$PIPAPP_DIR/manifest/$name"

    # Finished.
    echo '--------------------------------------------------'
    echo "Finished installing $name. It added the following executables."
    echo "$(echo "$execs_new" | sed 's/^/- /')"

}

_pip-app::uninstall () {

    if [[ "$#" -lt 1 ]]; then
        echo "Package name missing!"
        return 1
    fi

    local name="$1"

    if [[ -d "$PIPAPP_DIR/virtualenvs/$name" ]]; then
        cat "$PIPAPP_DIR/manifest/$name" | xargs rm
        rm -rf "$PIPAPP_DIR/virtualenvs/$name" \
            "$PIPAPP_DIR/manifest/$name"

        echo "Removed app '$name'."

    else
        echo 'Cannot delete, no such app is available.' >&2
        return 1

    fi

}

_pip-app::list () {

    local manifest_dir="$PIPAPP_DIR/manifest"
    for app in $(ls -1 "$manifest_dir"); do
        echo "$app:"
        local binaries="$(cat "$manifest_dir/$app" | \
            sed "s:$PIPAPP_DIR/bin/::" | tr '\n' ' ')"
        echo "-> $binaries"
    done

}

_pip-app::usage () {

    cat <<EOF
Usage: pip-app <command> [option]..

Commands:
  install                     Install application.
  uninstall                   Uninstall application.
  list                        List installed applications.
  help                        Display this help.
EOF

}

pip-app () {

    if [[ "$#" -lt 1 ]]; then
        _pip-app::usage
        return 1
    fi

    local cmd="${1}"; shift

    case "${cmd}" in
        install) _pip-app::install "$@";;
        uninstall) _pip-app::uninstall "$@";;
        list) _pip-app::list "$@";;
        *) _pip-app::usage; return 1;;
    esac

}
